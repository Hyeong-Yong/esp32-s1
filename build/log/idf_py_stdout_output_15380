[1/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D G:\esp32\GPIO_esp32_v1\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 G:/esp32/GPIO_esp32_v1/build/bootloader/bootloader.bin"
Bootloader binary size 0x66e0 bytes. 0x920 bytes (8%) free.
[2/11] No install step for 'bootloader'
[3/11] Completed 'bootloader'
[4/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/ap/ap.c.obj
[5/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[6/11] Linking C static library esp-idf\main\libmain.a
[7/11] Generating ld/sections.ld
[8/11] Building C object CMakeFiles/generic_gpio.elf.dir/project_elf_src_esp32.c.obj
[9/11] Linking CXX executable generic_gpio.elf
[10/11] Generating binary image from built executable
esptool.py v4.4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated G:/esp32/GPIO_esp32_v1/build/generic_gpio.bin
[11/11] cmd.exe /C "cd /D G:\esp32\GPIO_esp32_v1\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.0_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.0/components/partition_table/check_sizes.py --offset 0x8000 partition --type app G:/esp32/GPIO_esp32_v1/build/partition_table/partition-table.bin G:/esp32/GPIO_esp32_v1/build/generic_gpio.bin"
generic_gpio.bin binary size 0x2d280 bytes. Smallest app partition is 0x100000 bytes. 0xd2d80 bytes (82%) free.
